description = "Spring4 WebSocket Sample"

defaultTasks 'build'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

buildscript {
	repositories {
		jcenter()
		maven { url "http://repo.spring.io/plugins-release" }		
		maven { url "http://repo.spring.io/plugins-milestone" }
		maven { url "http://repo.spring.io/plugins-snapshot" }
	}
	dependencies {
		classpath "org.gradle.api.plugins:gradle-tomcat-plugin:$gradleTomcatPluginVersion"
		classpath "org.gradle.api.plugins:gradle-cargo-plugin:$gradleCargoPluginVersion"
		classpath "org.springframework.build.gradle:bundlor-plugin:$gradleSpringBundlorPluginVersion"
		classpath "org.springframework.build.gradle:propdeps-plugin:$gradleSpringPropdepsPluginVersion"
	}
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "$gradleVersion"
  
	doLast() {
	  def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
	  def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
	  File wrapperFile = file("gradlew")
	  wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
												  "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
	  File wrapperBatFile = file("gradlew.bat")
	  wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
														"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	}
}


apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: "java"
apply plugin: "eclipse-wtp"
apply plugin: "war"
apply from: "${gradleScriptDir}/maven.gradle"
apply from: "${gradleScriptDir}/ide.gradle"

group = "${group}"

configurations {
  all {
	//Hack to let Gradle pickup latest SNAPSHOTS
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	exclude group: "commons-logging"
	exclude module: "slf4j-log4j12"
  }
}

project.sourceCompatibility = 1.7
project.targetCompatibility = 1.7

[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g", "-encoding", "UTF-8"]

sourceSets.test.resources.srcDirs = ["src/test/java", "src/test/resources"]

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "http://repo.spring.io/libs-release" }
  maven { url "http://repo.spring.io/libs-milestone" }
  maven { url "http://repo.spring.io/libs-snapshot" }
  maven { url "https://raw.github.com/gmind7/gmind7.maven.repository/master/lib-releases" }
}

javadoc {
  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
  options.author = true
  options.header = rootProject.name
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allJava
}
task javadocJar(type: Jar) {
  classifier = "javadoc"
  from javadoc
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

dependencies {
  // Gmind7
  compile("com.gmind7.bakery:bakery-spring-application-config:$bakerySpringApplicationVersion") { force = true }
  compile("com.gmind7.bakery:bakery-spring-web-mvc-config:$bakerySpringWebMvcVersion") { force = true }
  compile("com.gmind7.bakery:bakery-spring-web-support:$bakerySpringWebSupportVersion") { force = true }
		
  // Spring
  compile("org.springframework:spring-core:$springVersion") { force = true }
  compile("org.springframework:spring-beans:$springVersion") { force = true }	
  compile("org.springframework:spring-context:$springVersion") { force = true }
  compile("org.springframework:spring-context-support:$springVersion") { force = true }
  compile("org.springframework:spring-aop:$springVersion") { force = true }
  compile("org.springframework:spring-aspects:$springVersion") { force = true }
  compile("org.springframework:spring-expression:$springVersion") { force = true }
  compile("org.springframework:spring-tx:$springVersion") { force = true }
  compile("org.springframework:spring-orm:$springVersion") { force = true }
  compile("org.springframework:spring-jdbc:$springVersion") { force = true }
  compile("org.springframework:spring-web:$springVersion") { force = true }
  compile("org.springframework:spring-webmvc:$springVersion") { force = true }
  compile("org.springframework:spring-websocket:$springVersion") { force = true }
  compile("org.springframework:spring-messaging:$springVersion") { force = true }
  compile("org.springframework.hateoas:spring-hateoas:$springHateoasVersion") { force = true }
  
  // Logging
  runtime "ch.qos.logback:logback-classic:$logbackVersion"
  compile "org.slf4j:slf4j-api:$slf4jVersion"
  runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
  
  // AspectJ
  compile "org.aspectj:aspectjrt:$aspectjVersion"
  compile "org.aspectj:aspectjweaver:$aspectjVersion"
  compile "aopalliance:aopalliance:$aopallianceVersion"
  
  // Jackson
  compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
  
  // JSR 303 with Hibernate Validator
  compile "javax.validation:validation-api:$javaxValidationVersion"
  compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
  
  // Etc Supporting libraries
  runtime "cglib:cglib-nodep:$cglibVersion"
  compile "com.google.guava:guava:$guavaVersion"
  compile "joda-time:joda-time:$jodaVersion"
  //providedCompile "org.projectlombok:lombok:$lombokVersion"
  
  // APIs
  compile "javax.inject:javax.inject:$javaxInjectVersion"
  
  // Apache Commons
  compile "org.apache.commons:commons-lang3:$apacheCommonsLang3Version"
  compile "commons-io:commons-io:$apacheCommonsIOVersion"
  compile "commons-fileupload:commons-fileupload:$apacheCommonsFileuploadVersion"
  compile "commons-beanutils:commons-beanutils:$apacheCommonsBeanutilsVersion"
  compile "commons-collections:commons-collections:$apacheCommonsCollectionsVersion"
  compile "commons-configuration:commons-configuration:$apacheCommonsConfigurationVersion"
  compile "commons-pool:commons-pool:$apacheCommonsPoolVersion"
  compile "org.apache.httpcomponents:httpclient:$apacheHttpclientVersion"

  // Thymeleaf
  compile "org.thymeleaf:thymeleaf:$thymeleafVersion"
  compile "org.thymeleaf:thymeleaf-spring3:$thymeleafVersion"
  compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:$thymeleafExtrasSpringsecurity3"
  compile "nz.net.ultraq.web.thymeleaf:thymeleaf-layout-dialect:$thymeleafLayoutDialectVersion"
  
  // Servlet
  provided "javax.servlet:javax.servlet-api:$javaxServletApiVersion"
  provided "javax.servlet:jsp-api:$javaxServletJspApiVersion"
  
  // Testing
  testCompile "junit:junit:$junitVersion"
  testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
  testCompile "com.jayway.jsonpath:json-path:$jsonpathVersion"
  testCompile "org.mockito:mockito-core:$mockitoVersion"
  testCompile("org.springframework:spring-test:$springVersion") { force = true }
}